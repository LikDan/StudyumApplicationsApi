// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: studyPlaces.proto

package protostudyplaces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudyPlacesClient is the client API for StudyPlaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlacesClient interface {
	GetByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StudyPlace, error)
}

type studyPlacesClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlacesClient(cc grpc.ClientConnInterface) StudyPlacesClient {
	return &studyPlacesClient{cc}
}

func (c *studyPlacesClient) GetByID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*StudyPlace, error) {
	out := new(StudyPlace)
	err := c.cc.Invoke(ctx, "/StudyPlaces/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlacesServer is the server API for StudyPlaces service.
// All implementations should embed UnimplementedStudyPlacesServer
// for forward compatibility
type StudyPlacesServer interface {
	GetByID(context.Context, *IdRequest) (*StudyPlace, error)
}

// UnimplementedStudyPlacesServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlacesServer struct {
}

func (UnimplementedStudyPlacesServer) GetByID(context.Context, *IdRequest) (*StudyPlace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}

// UnsafeStudyPlacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlacesServer will
// result in compilation errors.
type UnsafeStudyPlacesServer interface {
	mustEmbedUnimplementedStudyPlacesServer()
}

func RegisterStudyPlacesServer(s grpc.ServiceRegistrar, srv StudyPlacesServer) {
	s.RegisterService(&StudyPlaces_ServiceDesc, srv)
}

func _StudyPlaces_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlacesServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudyPlaces/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlacesServer).GetByID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyPlaces_ServiceDesc is the grpc.ServiceDesc for StudyPlaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyPlaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StudyPlaces",
	HandlerType: (*StudyPlacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _StudyPlaces_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studyPlaces.proto",
}
